// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SatelliteSite;

namespace SatelliteSite.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Ccs.Entities.Balloon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Done")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("SubmissionId");

                    b.ToTable("ContestBalloons");
                });

            modelBuilder.Entity("Ccs.Entities.Clarification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Answered")
                        .HasColumnType("boolean");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<string>("JuryMember")
                        .HasColumnType("text");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<int?>("Recipient")
                        .HasColumnType("integer");

                    b.Property<int?>("ResponseToId")
                        .HasColumnType("integer");

                    b.Property<int?>("Sender")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmitTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.HasIndex("ResponseToId");

                    b.HasIndex("ContestId", "Recipient");

                    b.HasIndex("ContestId", "Sender");

                    b.ToTable("ContestClarifications");
                });

            modelBuilder.Entity("Ccs.Entities.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("EndTimeSeconds")
                        .HasColumnName("EndTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreezeTimeSeconds")
                        .HasColumnName("FreezeTime")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProblemCount")
                        .HasColumnType("integer");

                    b.Property<int>("RankingStrategy")
                        .HasColumnType("integer");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeamCount")
                        .HasColumnType("integer");

                    b.Property<double?>("UnfreezeTimeSeconds")
                        .HasColumnName("UnfreezeTime")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Ccs.Entities.ContestProblem", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowSubmit")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("ContestId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("ContestId", "ShortName")
                        .IsUnique();

                    b.ToTable("ContestProblems");
                });

            modelBuilder.Entity("Ccs.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying(2048)")
                        .HasMaxLength(2048);

                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<string>("EndpointId")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("EndpointType")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("EventTime");

                    b.ToTable("ContestEvents");
                });

            modelBuilder.Entity("Ccs.Entities.Jury", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("ContestId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ContestJury");
                });

            modelBuilder.Entity("Ccs.Entities.Member", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text");

                    b.Property<bool>("Temporary")
                        .HasColumnType("boolean");

                    b.HasKey("ContestId", "TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("ContestId", "UserId")
                        .IsUnique();

                    b.ToTable("ContestMembers");
                });

            modelBuilder.Entity("Ccs.Entities.Printing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Done")
                        .HasColumnType("boolean");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<byte[]>("SourceCode")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasMaxLength(65536);

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("ContestPrintings");
                });

            modelBuilder.Entity("Ccs.Entities.RankCache", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("LastAcPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("LastAcRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("PointsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("PointsRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalTimePublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalTimeRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("ContestId", "TeamId");

                    b.ToTable("ContestRankCache");
                });

            modelBuilder.Entity("Ccs.Entities.ScoreCache", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<bool>("FirstToSolve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCorrectPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCorrectRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("PendingPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("PendingRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("ScorePublic")
                        .HasColumnType("integer");

                    b.Property<int?>("ScoreRestricted")
                        .HasColumnType("integer");

                    b.Property<double?>("SolveTimePublic")
                        .HasColumnType("double precision");

                    b.Property<double?>("SolveTimeRestricted")
                        .HasColumnType("double precision");

                    b.Property<int>("SubmissionPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("SubmissionRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("ContestId", "TeamId", "ProblemId");

                    b.ToTable("ContestScoreCache");
                });

            modelBuilder.Entity("Ccs.Entities.Team", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("AffiliationId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ContestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<DateTimeOffset?>("RegisterTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("ContestId", "TeamId");

                    b.HasIndex("AffiliationId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContestId", "Status");

                    b.ToTable("ContestTeams");
                });

            modelBuilder.Entity("Ccs.Entities.Visibility", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("AffiliationId")
                        .HasColumnType("integer");

                    b.HasKey("ContestId", "AffiliationId");

                    b.HasIndex("AffiliationId");

                    b.ToTable("ContestTenants");
                });

            modelBuilder.Entity("Jobs.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Arguments")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CompleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Composite")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobType")
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentJobId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestedFileName")
                        .HasColumnType("text");

                    b.HasKey("JobId");

                    b.HasIndex("CreationTime");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentJobId");

                    b.HasIndex("Status");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Plag.Backend.Entities.PlagiarismSet<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ContestId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ReportCount")
                        .HasColumnType("integer");

                    b.Property<int>("ReportPending")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionCount")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionFailed")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionSucceeded")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("PlagiarismSets");
                });

            modelBuilder.Entity("Plag.Backend.Entities.Report<System.Guid>", b =>
                {
                    b.Property<Guid>("SetId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubmissionA")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionB")
                        .HasColumnType("integer");

                    b.Property<int>("BiggestMatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Justification")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Matches")
                        .HasColumnType("bytea");

                    b.Property<double>("Percent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PercentA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PercentB")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<int>("TokensMatched")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("SetId", "SubmissionA", "SubmissionB");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("SetId", "SubmissionB");

                    b.ToTable("PlagiarismReports");
                });

            modelBuilder.Entity("Plag.Backend.Entities.Submission<System.Guid>", b =>
                {
                    b.Property<Guid>("SetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<int>("ExclusiveCategory")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("InclusiveCategory")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<double>("MaxPercent")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool?>("TokenProduced")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Tokens")
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset>("UploadTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SetId", "Id");

                    b.ToTable("PlagiarismSubmissions");
                });

            modelBuilder.Entity("Plag.Backend.Entities.SubmissionFile<System.Guid>", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.HasKey("SubmissionId", "FileId");

                    b.ToTable("PlagiarismFiles");
                });

            modelBuilder.Entity("Polygon.Entities.Executable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ExecId")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Md5sum")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ZipFile")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasMaxLength(1048576);

                    b.Property<int>("ZipSize")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PolygonExecutables");
                });

            modelBuilder.Entity("Polygon.Entities.InternalError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ErrorId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ContestId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Disabled")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JudgehostLog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JudgingId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.ToTable("PolygonErrors");
                });

            modelBuilder.Entity("Polygon.Entities.Judgehost", b =>
                {
                    b.Property<string>("ServerName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("PollTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ServerName");

                    b.ToTable("PolygonJudgehosts");
                });

            modelBuilder.Entity("Polygon.Entities.Judging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JudgingId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CompileError")
                        .HasColumnType("character varying(131072)")
                        .HasMaxLength(131072)
                        .IsUnicode(false);

                    b.Property<int?>("ExecuteMemory")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecuteTime")
                        .HasColumnType("integer");

                    b.Property<bool>("FullTest")
                        .HasColumnType("boolean");

                    b.Property<int>("PolygonVersion")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousJudgingId")
                        .HasColumnType("integer");

                    b.Property<int?>("RejudgingId")
                        .HasColumnType("integer");

                    b.Property<string>("RunVerdicts")
                        .HasColumnType("text");

                    b.Property<string>("Server")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StopTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreviousJudgingId");

                    b.HasIndex("RejudgingId");

                    b.HasIndex("Server");

                    b.HasIndex("Status");

                    b.HasIndex("SubmissionId");

                    b.ToTable("PolygonJudgings");
                });

            modelBuilder.Entity("Polygon.Entities.JudgingRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RunId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CompleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExecuteMemory")
                        .HasColumnType("integer");

                    b.Property<int>("ExecuteTime")
                        .HasColumnType("integer");

                    b.Property<int>("JudgingId")
                        .HasColumnType("integer");

                    b.Property<string>("MetaData")
                        .IsRequired()
                        .HasColumnType("character varying(131072)")
                        .HasMaxLength(131072)
                        .IsUnicode(false);

                    b.Property<string>("OutputDiff")
                        .IsRequired()
                        .HasColumnType("character varying(131072)")
                        .HasMaxLength(131072)
                        .IsUnicode(false);

                    b.Property<string>("OutputSystem")
                        .IsRequired()
                        .HasColumnType("character varying(131072)")
                        .HasMaxLength(131072)
                        .IsUnicode(false);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TestcaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JudgingId");

                    b.HasIndex("TestcaseId");

                    b.ToTable("PolygonJudgingRuns");
                });

            modelBuilder.Entity("Polygon.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("LangId")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<bool>("AllowJudge")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSubmit")
                        .HasColumnType("boolean");

                    b.Property<string>("CompileScript")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<double>("TimeFactor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompileScript");

                    b.ToTable("PolygonLanguages");
                });

            modelBuilder.Entity("Polygon.Entities.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProblemId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AllowJudge")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSubmit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CombinedRunCompare")
                        .HasColumnType("boolean");

                    b.Property<string>("CompareArguments")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("CompareScript")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("MemoryLimit")
                        .HasColumnType("integer");

                    b.Property<int>("OutputLimit")
                        .HasColumnType("integer");

                    b.Property<string>("RunScript")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("Shared")
                        .HasColumnType("boolean");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CompareScript");

                    b.HasIndex("RunScript");

                    b.ToTable("PolygonProblems");
                });

            modelBuilder.Entity("Polygon.Entities.ProblemAuthor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("PolygonAuthors");
                });

            modelBuilder.Entity("Polygon.Entities.Rejudging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RejudgingId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Applied")
                        .HasColumnType("boolean");

                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("IssuedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("OperatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("IssuedBy");

                    b.HasIndex("OperatedBy");

                    b.ToTable("PolygonRejudgings");
                });

            modelBuilder.Entity("Polygon.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubmissionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodeLength")
                        .HasColumnType("integer");

                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpectedResult")
                        .HasColumnType("integer");

                    b.Property<bool>("Ignored")
                        .HasColumnType("boolean");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<int?>("RejudgingId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceCode")
                        .IsRequired()
                        .HasColumnType("character varying(262144)")
                        .HasMaxLength(262144)
                        .IsUnicode(false);

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("Language");

                    b.HasIndex("ProblemId");

                    b.HasIndex("RejudgingId");

                    b.HasIndex("ContestId", "TeamId");

                    b.ToTable("PolygonSubmissions");
                });

            modelBuilder.Entity("Polygon.Entities.SubmissionStatistics", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<int>("AcceptedSubmission")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSubmission")
                        .HasColumnType("integer");

                    b.HasKey("ContestId", "TeamId", "ProblemId");

                    b.HasIndex("ContestId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("ContestId", "ProblemId");

                    b.HasIndex("ContestId", "TeamId");

                    b.ToTable("PolygonStatistics");
                });

            modelBuilder.Entity("Polygon.Entities.Testcase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestcaseId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CustomInput")
                        .HasColumnType("text");

                    b.Property<string>("CustomOutput")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<int>("InputLength")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean");

                    b.Property<string>("Md5sumInput")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Md5sumOutput")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int>("OutputLength")
                        .HasColumnType("integer");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.HasIndex("ProblemId", "Rank")
                        .IsUnique();

                    b.ToTable("PolygonTestcases");
                });

            modelBuilder.Entity("SatelliteSite.Entities.Auditlog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int?>("ContestId")
                        .HasColumnType("integer");

                    b.Property<string>("DataId")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogId");

                    b.HasIndex("DataType");

                    b.ToTable("Auditlogs");
                });

            modelBuilder.Entity("SatelliteSite.Entities.Configuration", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayPriority")
                        .HasColumnType("integer");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.HasKey("Name");

                    b.ToTable("Configurations");

                    b.HasData(
                        new
                        {
                            Name = "enable_register",
                            Category = "Identity",
                            Description = "Whether to allow user self registration.",
                            DisplayPriority = 0,
                            Public = true,
                            Type = "bool",
                            Value = "true"
                        },
                        new
                        {
                            Name = "process_limit",
                            Category = "Judging",
                            Description = "Maximum number of processes that the submission is allowed to start (including shell and possibly interpreters).",
                            DisplayPriority = 1,
                            Public = true,
                            Type = "int",
                            Value = "64"
                        },
                        new
                        {
                            Name = "script_timelimit",
                            Category = "Judging",
                            Description = "Maximum seconds available for compile/compare scripts. This is a safeguard against malicious code and buggy scripts, so a reasonable but large amount should do.",
                            DisplayPriority = 2,
                            Public = true,
                            Type = "int",
                            Value = "30"
                        },
                        new
                        {
                            Name = "script_memory_limit",
                            Category = "Judging",
                            Description = "Maximum memory usage (in kB) by compile/compare scripts. This is a safeguard against malicious code and buggy script, so a reasonable but large amount should do.",
                            DisplayPriority = 3,
                            Public = true,
                            Type = "int",
                            Value = "2097152"
                        },
                        new
                        {
                            Name = "script_filesize_limit",
                            Category = "Judging",
                            Description = "Maximum filesize (in kB) compile/compare scripts may write. Submission will fail with compiler-error when trying to write more, so this should be greater than any *intermediate or final* result written by compilers.",
                            DisplayPriority = 4,
                            Public = true,
                            Type = "int",
                            Value = "540672"
                        },
                        new
                        {
                            Name = "timelimit_overshoot",
                            Category = "Judging",
                            Description = "Time that submissions are kept running beyond timelimit before being killed. Specify as \"Xs\" for X seconds, \"Y%\" as percentage, or a combination of both separated by one of \"+|&\" for the sum, maximum, or minimum of both.",
                            DisplayPriority = 5,
                            Public = true,
                            Type = "string",
                            Value = "\"1s|10%\""
                        },
                        new
                        {
                            Name = "output_storage_limit",
                            Category = "Judging",
                            Description = "Maximum size of error/system output stored in the database (in bytes); use \"-1\" to disable any limits.",
                            DisplayPriority = 6,
                            Public = true,
                            Type = "int",
                            Value = "60000"
                        },
                        new
                        {
                            Name = "diskspace_error",
                            Category = "Judging",
                            Description = "Minimum free disk space (in kB) on judgehosts.",
                            DisplayPriority = 7,
                            Public = true,
                            Type = "int",
                            Value = "1048576"
                        },
                        new
                        {
                            Name = "update_judging_seconds",
                            Category = "Judging",
                            Description = "Post updates to a judging every X seconds. Set to 0 to update after each judging_run.",
                            DisplayPriority = 8,
                            Public = true,
                            Type = "int",
                            Value = "0"
                        });
                });

            modelBuilder.Entity("SatelliteSite.IdentityModule.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ConcurrencyStamp = "9805fda4-f300-ff78-a6d8-faf0d8e418fd",
                            Description = "Administrative User",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            ShortName = "admin"
                        },
                        new
                        {
                            Id = -2,
                            ConcurrencyStamp = "f1722fb1-cd10-256b-48bb-71afd116ae66",
                            Description = "Blocked User",
                            Name = "Blocked",
                            NormalizedName = "BLOCKED",
                            ShortName = "blocked"
                        },
                        new
                        {
                            Id = -16,
                            ConcurrencyStamp = "c8259cc1-f159-cbf3-9348-ee1d3967d3ac",
                            Description = "Verified Student",
                            Name = "Student",
                            NormalizedName = "STUDENT",
                            ShortName = "student"
                        },
                        new
                        {
                            Id = -10,
                            ConcurrencyStamp = "44315c39-534d-ec0c-61f0-c0a5ed981cd9",
                            Description = "(Internal/System) Judgehost",
                            Name = "Judgehost",
                            NormalizedName = "JUDGEHOST",
                            ShortName = "judgehost"
                        },
                        new
                        {
                            Id = -11,
                            ConcurrencyStamp = "f25ae969-433c-3f4a-04ca-7ec12d2583cc",
                            Description = "Problem Provider",
                            Name = "ProblemCreator",
                            NormalizedName = "PROBLEMCREATOR",
                            ShortName = "prob"
                        },
                        new
                        {
                            Id = -30,
                            ConcurrencyStamp = "40100c40-6ca5-7bcb-48bc-41f2a939cbee",
                            Description = "CDS API user",
                            Name = "CDS",
                            NormalizedName = "CDS",
                            ShortName = "cds_api"
                        },
                        new
                        {
                            Id = -31,
                            ConcurrencyStamp = "8f8c37e1-a309-bd2d-6708-0519df89139b",
                            Description = "Contest Creator",
                            Name = "ContestCreator",
                            NormalizedName = "CONTESTCREATOR",
                            ShortName = "cont"
                        },
                        new
                        {
                            Id = -32,
                            ConcurrencyStamp = "d68c9040-7762-ab0b-06eb-19ce1b5a5120",
                            Description = "Temporary Team Account",
                            Name = "TemporaryTeamAccount",
                            NormalizedName = "TEMPORARYTEAMACCOUNT",
                            ShortName = "temp_team"
                        },
                        new
                        {
                            Id = -37,
                            ConcurrencyStamp = "76133040-8512-5021-491b-563056c3f919",
                            Description = "Plagiarism Detect User",
                            Name = "PlagUser",
                            NormalizedName = "PLAGUSER",
                            ShortName = "plaguser"
                        });
                });

            modelBuilder.Entity("SatelliteSite.XylabUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NickName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Plan")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RegisterTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("StudentVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubscribeNews")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("StudentId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Tenant.Entities.Affiliation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("EmailSuffix")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation");

                    b.ToTable("TenantAffiliation");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Abbreviation = "null",
                            CountryCode = "CHN",
                            Name = "(none)"
                        });
                });

            modelBuilder.Entity("Tenant.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ContestId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("IsPublic");

                    b.HasIndex("SortOrder");

                    b.ToTable("TenantCategory");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Color = "#ff2bea",
                            IsPublic = false,
                            Name = "System",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = -2,
                            Color = "#33cc44",
                            IsPublic = true,
                            Name = "Self-Registered",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = -3,
                            Color = "#ffffff",
                            IsPublic = true,
                            Name = "Participants",
                            SortOrder = 0
                        },
                        new
                        {
                            Id = -4,
                            Color = "#ffcc33",
                            IsPublic = true,
                            Name = "Observers",
                            SortOrder = 0
                        },
                        new
                        {
                            Id = -5,
                            Color = "#ff99cc",
                            IsPublic = true,
                            Name = "Organisation",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = -6,
                            Color = "#96d5ff",
                            IsPublic = true,
                            Name = "Companies",
                            SortOrder = 1
                        });
                });

            modelBuilder.Entity("Tenant.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AffiliationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("AffiliationId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantTeachingClasses");
                });

            modelBuilder.Entity("Tenant.Entities.ClassStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("character varying(32)");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TenantClassStudents");
                });

            modelBuilder.Entity("Tenant.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<int>("AffiliationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AffiliationId");

                    b.ToTable("TenantStudents");
                });

            modelBuilder.Entity("Tenant.Entities.VerifyCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AffiliationId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<int>("RedeemCount")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AffiliationId");

                    b.HasIndex("Code");

                    b.HasIndex("UserId");

                    b.ToTable("TenantVerifyCodes");
                });

            modelBuilder.Entity("Ccs.Entities.Balloon", b =>
                {
                    b.HasOne("Polygon.Entities.Submission", null)
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.Clarification", b =>
                {
                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Polygon.Entities.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ccs.Entities.Clarification", null)
                        .WithMany()
                        .HasForeignKey("ResponseToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ccs.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("ContestId", "Recipient")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ccs.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("ContestId", "Sender")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Ccs.Entities.ContestProblem", b =>
                {
                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Polygon.Entities.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.Event", b =>
                {
                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.Jury", b =>
                {
                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.Member", b =>
                {
                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ccs.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("ContestId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.Printing", b =>
                {
                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.RankCache", b =>
                {
                    b.HasOne("Ccs.Entities.Team", null)
                        .WithOne()
                        .HasForeignKey("Ccs.Entities.RankCache", "ContestId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.ScoreCache", b =>
                {
                    b.HasOne("Ccs.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("ContestId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.Team", b =>
                {
                    b.HasOne("Tenant.Entities.Affiliation", null)
                        .WithMany()
                        .HasForeignKey("AffiliationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tenant.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ccs.Entities.Visibility", b =>
                {
                    b.HasOne("Tenant.Entities.Affiliation", null)
                        .WithMany()
                        .HasForeignKey("AffiliationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Entities.Job", b =>
                {
                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Jobs.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("ParentJobId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SatelliteSite.IdentityModule.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SatelliteSite.IdentityModule.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plag.Backend.Entities.Report<System.Guid>", b =>
                {
                    b.HasOne("Plag.Backend.Entities.PlagiarismSet<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plag.Backend.Entities.Submission<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("SetId", "SubmissionA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Plag.Backend.Entities.Submission<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("SetId", "SubmissionB")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Plag.Backend.Entities.Submission<System.Guid>", b =>
                {
                    b.HasOne("Plag.Backend.Entities.PlagiarismSet<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plag.Backend.Entities.SubmissionFile<System.Guid>", b =>
                {
                    b.HasOne("Plag.Backend.Entities.Submission<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .HasPrincipalKey("ExternalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Polygon.Entities.Judging", b =>
                {
                    b.HasOne("Polygon.Entities.Judging", null)
                        .WithMany()
                        .HasForeignKey("PreviousJudgingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Polygon.Entities.Rejudging", null)
                        .WithMany()
                        .HasForeignKey("RejudgingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Polygon.Entities.Judgehost", null)
                        .WithMany()
                        .HasForeignKey("Server")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Polygon.Entities.Submission", "s")
                        .WithMany("Judgings")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Polygon.Entities.JudgingRun", b =>
                {
                    b.HasOne("Polygon.Entities.Judging", "j")
                        .WithMany()
                        .HasForeignKey("JudgingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Polygon.Entities.Testcase", null)
                        .WithMany()
                        .HasForeignKey("TestcaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Polygon.Entities.Language", b =>
                {
                    b.HasOne("Polygon.Entities.Executable", null)
                        .WithMany()
                        .HasForeignKey("CompileScript")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Polygon.Entities.Problem", b =>
                {
                    b.HasOne("Polygon.Entities.Executable", null)
                        .WithMany()
                        .HasForeignKey("CompareScript")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Polygon.Entities.Executable", null)
                        .WithMany()
                        .HasForeignKey("RunScript")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Polygon.Entities.ProblemAuthor", b =>
                {
                    b.HasOne("Polygon.Entities.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Polygon.Entities.Rejudging", b =>
                {
                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("IssuedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("OperatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Polygon.Entities.Submission", b =>
                {
                    b.HasOne("Polygon.Entities.Language", "l")
                        .WithMany()
                        .HasForeignKey("Language")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Polygon.Entities.Problem", "p")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Polygon.Entities.Rejudging", null)
                        .WithMany()
                        .HasForeignKey("RejudgingId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Polygon.Entities.SubmissionStatistics", b =>
                {
                    b.HasOne("Polygon.Entities.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Polygon.Entities.Testcase", b =>
                {
                    b.HasOne("Polygon.Entities.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SatelliteSite.XylabUser", b =>
                {
                    b.HasOne("Tenant.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Tenant.Entities.Category", b =>
                {
                    b.HasOne("Ccs.Entities.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tenant.Entities.Class", b =>
                {
                    b.HasOne("Tenant.Entities.Affiliation", "Affiliation")
                        .WithMany()
                        .HasForeignKey("AffiliationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tenant.Entities.ClassStudent", b =>
                {
                    b.HasOne("Tenant.Entities.Class", null)
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenant.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tenant.Entities.Student", b =>
                {
                    b.HasOne("Tenant.Entities.Affiliation", null)
                        .WithMany()
                        .HasForeignKey("AffiliationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tenant.Entities.VerifyCode", b =>
                {
                    b.HasOne("Tenant.Entities.Affiliation", null)
                        .WithMany()
                        .HasForeignKey("AffiliationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelliteSite.XylabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
